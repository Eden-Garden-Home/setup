version: '3.8'

networks:
  default:
    name: setup_default
  traefik-public:
    name: setup_traefik-public
  authentik-internal:
    name: setup_authentik-internal
  services-internal:
    name: setup_services-internal
  database-internal:
    name: setup_database-internal

volumes:
  traefik-certs:
  tailscale-state:
  postgresql-data:
  redis-data:
  authentik-media:
  authentik-custom-templates:
  n8n-data:

services:
  # ==========================================
  # TAILSCALE
  # ==========================================
  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale
    hostname: ${TAILSCALE_HOSTNAME}
    restart: unless-stopped
    networks:
      - default
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_HOSTNAME=${TAILSCALE_HOSTNAME}
      - TS_EXTRA_ARGS=--advertise-tags=tag:container
    volumes:
      - tailscale-state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
      - /var/run/tailscale:/var/run/tailscale
    cap_add:
      - net_admin
      - sys_module

  # ==========================================
  # TRAEFIK - Su rete bridge standard
  # ==========================================
  traefik:
    image: traefik:v3.2
    container_name: traefik
    restart: unless-stopped
    depends_on:
      - tailscale
    security_opt:
      - no-new-privileges:true
    networks:
      - default
      - traefik-public
      - authentik-internal
      - services-internal
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik-certs:/certs
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=setup_traefik-public"
      # Dashboard Traefik (solo Tailscale)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=tailscale"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=authentik@docker"

  # ==========================================
  # CLOUDFLARED
  # ==========================================
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    networks:
      - traefik-public
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}

  # ==========================================
  # POSTGRESQL
  # ==========================================
  postgresql:
    image: postgres:16-alpine
    container_name: postgresql
    restart: unless-stopped
    networks:
      - database-internal
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_ROOT_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./postgres/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # REDIS
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - authentik-internal
    command: --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  # ==========================================
  # AUTHENTIK SERVER
  # ==========================================
  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    restart: unless-stopped
    networks:
      - authentik-internal
      - database-internal
      - traefik-public
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
    volumes:
      - authentik-media:/media
      - authentik-custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=setup_traefik-public"
      # Authentik UI (solo Tailscale)
      - "traefik.http.routers.authentik.rule=Host(`auth.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls.certresolver=tailscale"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      # Middleware ForwardAuth
      - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik-server:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid"

  # ==========================================
  # AUTHENTIK WORKER
  # ==========================================
  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    networks:
      - authentik-internal
      - database-internal
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
    volumes:
      - authentik-media:/media
      - authentik-custom-templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgresql
      - redis

  # ==========================================
  # N8N
  # ==========================================
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    networks:
      - traefik-public
      - services-internal
      - database-internal
    environment:
      - N8N_HOST=n8n.${TAILSCALE_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://webhooks.${PUBLIC_DOMAIN}
      - N8N_EDITOR_BASE_URL=https://n8n.${TAILSCALE_DOMAIN}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      - postgresql
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=setup_traefik-public"
      
      # UI n8n (solo Tailscale con Authentik)
      - "traefik.http.routers.n8n-ui.rule=Host(`n8n.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.n8n-ui.entrypoints=websecure"
      - "traefik.http.routers.n8n-ui.tls.certresolver=tailscale"
      - "traefik.http.routers.n8n-ui.middlewares=authentik@docker"
      - "traefik.http.routers.n8n-ui.service=n8n"
      
      # Webhook n8n (pubblico via Cloudflare)
      - "traefik.http.routers.n8n-webhook.rule=Host(`webhooks.${PUBLIC_DOMAIN}`)"
      - "traefik.http.routers.n8n-webhook.entrypoints=websecure"
      - "traefik.http.routers.n8n-webhook.tls.certresolver=cloudflare"
      - "traefik.http.routers.n8n-webhook.priority=100"
      - "traefik.http.routers.n8n-webhook.service=n8n"
      
      # Service
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
