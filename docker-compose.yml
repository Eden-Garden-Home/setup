version: "3.9"

networks:
  traefik-public:
  authentik-internal:
  database-internal:

volumes:
  traefik-certs:
  tailscale-state:
  postgresql-data:
  redis-data:
  authentik-media:
  authentik-templates:
  n8n-data:
  pihole-etc:
    name: ${COMPOSE_PROJECT_NAME}_pihole-etc
  pihole-dnsmasq:
    name: ${COMPOSE_PROJECT_NAME}_pihole-dnsmasq

services:
  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale
    hostname: ${TAILSCALE_HOSTNAME}
    restart: unless-stopped
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - tailscale-state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    network_mode: host

  traefik:
    image: traefik:v3.2
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik-public
      - authentik-internal
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - traefik-certs:/certs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=tailscale-allow@docker"
      - "traefik.http.middlewares.tailscale-allow.ipallowlist.sourcerange=100.64.0.0/10"
      # middleware ForwardAuth riusabile per tutti i servizi interni
      - "traefik.http.middlewares.authentik-auth.forwardauth.address=http://authentik-server:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik-auth.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt"

  postgresql:
    image: postgres:16-alpine
    container_name: postgresql
    restart: unless-stopped
    networks:
      - database-internal
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ROOT_PASSWORD}
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - authentik-internal
    command: --save 60 1
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    restart: unless-stopped
    networks:
      - authentik-internal
      - database-internal
      - traefik-public
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      # router principale di Authentik, solo su Tailscale
      - "traefik.http.routers.authentik.rule=Host(`${TAILSCALE_HOSTNAME}.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.routers.authentik.middlewares=tailscale-allow@docker"
      - "traefik.http.routers.authentik.priority=10"
      # router per l'outpost (non filtrato da ForwardAuth)
      - "traefik.http.routers.authentik-outpost.rule=Host(`${TAILSCALE_HOSTNAME}.${TAILSCALE_DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik-outpost.entrypoints=websecure"
      - "traefik.http.routers.authentik-outpost.tls=true"
      - "traefik.http.routers.authentik-outpost.priority=20"
      - "traefik.http.routers.authentik-outpost.service=authentik"

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    networks:
      - authentik-internal
      - database-internal
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_DB_NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    networks:
      - traefik-public
      - database-internal
    environment:
      - N8N_HOST=n8n.${TAILSCALE_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=https://n8n.${TAILSCALE_DOMAIN}
      - WEBHOOK_URL=https://${PUBLIC_N8N_HOST}/
      - N8N_PROXY_HOPS=1
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
      - DB_POSTGRESDB_USER=${N8N_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgresql:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      # UI interna protetta da Authentik + Tailscale
      - "traefik.http.routers.n8n-ui.rule=Host(`n8n.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.n8n-ui.entrypoints=websecure"
      - "traefik.http.routers.n8n-ui.tls=true"
      - "traefik.http.routers.n8n-ui.middlewares=authentik-auth@docker,tailscale-allow@docker"
      # Webhook pubblici via Cloudflare Tunnel (no auth)
      - "traefik.http.routers.n8n-hook.rule=Host(`${PUBLIC_N8N_HOST}`) && (PathPrefix(`/webhook`) || PathPrefix(`/webhook-test`) || PathPrefix(`/webhook-waiting`))"
      - "traefik.http.routers.n8n-hook.entrypoints=websecure"
      - "traefik.http.routers.n8n-hook.tls=true"
      - "traefik.http.routers.n8n-hook.priority=20"

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    restart: unless-stopped
    networks:
      - traefik-public
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8081:443/tcp"
    environment:
      TZ: 'Europe/Rome'
      WEBPASSWORD: 'Ciaociao123!'
      PIHOLE_DNS_: 'cloudflared-doh#5053'
      DNSMASQ_LISTENING: 'all'
    volumes:
      - pihole-etc:/etc/pihole
      - pihole-dnsmasq:/etc/dnsmasq.d
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public"
      - "traefik.http.routers.pihole.rule=Host(`pihole.${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.routers.pihole.middlewares=tailscale-allow@docker"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"

  cloudflared-doh:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-doh
    restart: unless-stopped
    command: proxy-dns --port 5053 --upstream https://1.1.1.1/dns-query --upstream https://1.0.0.1/dns-query
    networks:
      - traefik-public

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    networks:
      - traefik-public
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    volumes:
      - ./cloudflared/config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel run
